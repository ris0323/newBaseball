html {
  height: 100%;
}

body {
  position: relative;
  min-height: 100vh;


  &:before {
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    opacity: 0.36;
    @include iso-room($size: 6rem,
      $color1: #efebe9,
      $color2: #d7ccc8,
      $color3: #bcaaa4);
  }
}

* {
  box-sizing: border-box;
  border: 1px;
  text-align: center;
}

.container {
  margin: 0 auto;
  padding: 6rem 4rem;
  text-align: center;
  max-width: 80rem;


}

$bg: #3e2723;

table {
  border: solid 0.0625rem #0a0a0a;
  border-radius: 0.5rem;
  color: #263238;
  text-align: left;
  width: 100%;
  @include tilted(2deg, rgba($bg, 0.48));
  z-index: 1;
  background-color: #fff;

  &:before {
    z-index: -1;
  }

  thead {
    text-align: center;
    font-size: 125%;
    font-weight: 900;
  }

  th {
    background-color: #cfd8dc;
    color: #263238;
    padding: 0.5rem 1rem;
    text-align: inherit;

    &:nth-child(8) {
      background-color: #006064;
      border: 0.25rem solid #00838f;
      color: #fff;
    }
  }

  td {
    border: solid 0.0625rem #cfd8dc;
    padding: 0.5rem;
    text-align: inherit;

    &:nth-child(8) {
      border: 0.1875rem solid #80deea;
      color: #00bcd4;
      font-weight: 900;
      font-size: 112.5%;
    }
  }
}

// $height: 80;

@function pi() {
  @return 3.1415926535897932384626433832795028841971693993751;
}

@function fact($number) {
  $value: 1;

  @if $number >0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }

  @return $value;
}

@function pow($number, $exp) {
  $value: 1;

  @if $exp >0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }

  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }

  @return $value;
}

@function sin($angle) {
  $sin: 0;
  $rad: $angle * pi() * 1rad / 180deg;
  $angle: $rad / ($rad * 0 + 1);

  @for $i from 0 through 10 {
    $sin: $sin +pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }

  @return $sin;
}

@function sqrt($number) {
  $guess: 4;
  $root: $guess;

  @for $i from 1 through 50 {
    $root: $root - (pow($root, 2) - $number) / (2 * $root);
  }

  @return $root;
}

@function get-tilted-height($angle) {
  $a: (100% / 1%);
  $A: (90deg - $angle);
  $c: ($a / sin($A));
  $b: sqrt(pow($c, 2) - pow($a, 2));

  @return (abs($b) * 1);
}

@mixin tilted($angle, $color, $position: "top", $pseudo: "before") {
  $height: get-tilted-height($angle);

  position: relative;
  background-color: $color;

  &::#{$pseudo} {
    content: "";
    padding-top: $height * 1%;
    position: absolute;
    left: -0.25rem;
    right: 0;
    transform: rotate($height + deg) skew($height + deg) scale(1);

    @if ($position =="top") {
      bottom: 100%;
      background: linear-gradient($angle, transparent 50%, $color 50%);
    }

    @else {
      top: 100% - $height;
      background-image: linear-gradient($angle, $color 50%, transparent 50%);
    }
  }
}

@mixin iso-room($size: 4rem,
  $color1: #efebe9,
  $color2: #d7ccc8,
  $color3: #bcaaa4) {
  $grad-v: 75%,
  $color3 60deg,
  transparent 0;
  $grad-1: conic-gradient(from -120deg at 25% $grad-v);
  $grad-2: conic-gradient(from 60deg at 75% $grad-v);

  background: $grad-1,
  $grad-1 calc(3 * #{$size}) calc(#{$size} / 2),
  $grad-2,
  $grad-2 calc(3 * #{$size}) calc(#{$size} / 2),
  conic-gradient($color2 60deg,
    $color1 0 120deg,
    $color2 0 180deg,
    $color1 0 240deg,
    $color2 0 300deg,
    $color1 0);
  background-size: calc(2 * #{$size}) $size;
}